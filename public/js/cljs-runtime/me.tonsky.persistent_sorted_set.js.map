{"version":3,"sources":["me/tonsky/persistent_sorted_set.cljs"],"mappings":"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","names":["me.tonsky.persistent-sorted-set/max-safe-path","js/Math.pow","me.tonsky.persistent-sorted-set/bits-per-level","me.tonsky.persistent-sorted-set/max-len","me.tonsky.persistent-sorted-set/min-len","me.tonsky.persistent-sorted-set/avg-len","me.tonsky.persistent-sorted-set/max-safe-level","js/Math.floor","me.tonsky.persistent-sorted-set/bit-mask","me.tonsky.persistent-sorted-set/factors","me.tonsky.persistent-sorted-set.arrays/into-array","p1__18157#","cljs.core.map","cljs.core.range","me.tonsky.persistent-sorted-set/empty-path","me.tonsky.persistent-sorted-set/path-get","path","level","me.tonsky.persistent-sorted-set/path-set","idx","smol?","old","minus","plus","me.tonsky.persistent-sorted-set/path-inc","me.tonsky.persistent-sorted-set/path-dec","me.tonsky.persistent-sorted-set/path-cmp","path1","path2","me.tonsky.persistent-sorted-set/path-lt","me.tonsky.persistent-sorted-set/path-lte","me.tonsky.persistent-sorted-set/path-eq","me.tonsky.persistent-sorted-set/path-same-leaf","Math/floor","me.tonsky.persistent-sorted-set/path-str","res","cljs.core.not_EQ_","cljs.core.conj","cljs.core/mod","cljs.core/vec","me.tonsky.persistent-sorted-set/binary-search-l","cmp","arr","r","k","l","cljs.core/long","m","mk","me.tonsky.persistent-sorted-set/binary-search-r","me.tonsky.persistent-sorted-set/lookup-exact","key","arr-l","G__18168","G__18169","me.tonsky.persistent-sorted-set/lookup-range","me.tonsky.persistent-sorted-set/cut-n-splice","cut-from","cut-to","splice-from","splice-to","xs","xs-l","l1","l2","l1xs","new-arr","me.tonsky.persistent-sorted-set.arrays/make-array","l__18103__auto__","n__5636__auto__","i__18104__auto__","me.tonsky.persistent-sorted-set/splice","me.tonsky.persistent-sorted-set/insert","me.tonsky.persistent-sorted-set/merge-n-split","a1","a2","a1-l","a2-l","total-l","r1-l","r2-l","r1","r2","me.tonsky.persistent-sorted-set/eq-arr","a1-from","a1-to","a2-from","a2-to","len","and__5043__auto__","i","G__18170","G__18171","me.tonsky.persistent-sorted-set/check-n-splice","from","to","var_args","G__18173","me.tonsky.persistent-sorted-set/return-array","js/Error","a3","me$tonsky$persistent-sorted-set$INode$node_lim_key$dyn","x__5393__auto__","m__5394__auto__","me.tonsky.persistent-sorted-set/node-lim-key","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","me$tonsky$persistent-sorted-set$INode$node_len$dyn","me.tonsky.persistent-sorted-set/node-len","me$tonsky$persistent-sorted-set$INode$node_merge$dyn","me.tonsky.persistent-sorted-set/node-merge","me$tonsky$persistent-sorted-set$INode$node_merge_n_split$dyn","me.tonsky.persistent-sorted-set/node-merge-n-split","me$tonsky$persistent-sorted-set$INode$node_lookup$dyn","me.tonsky.persistent-sorted-set/node-lookup","me$tonsky$persistent-sorted-set$INode$node_conj$dyn","me.tonsky.persistent-sorted-set/node-conj","me$tonsky$persistent-sorted-set$INode$node_disj$dyn","me.tonsky.persistent-sorted-set/node-disj","me.tonsky.persistent-sorted-set/INode","_","next","root?","left","right","me.tonsky.persistent-sorted-set/rotate","node","me.tonsky.persistent_sorted_set.return_array","nodes","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","me.tonsky.persistent-sorted-set/Node","me.tonsky.persistent-sorted-set/->Node","keys","pointers","arr__18125__auto__","me.tonsky.persistent-sorted-set.arrays/aconcat","ks","ps","new-keys","me.tonsky.persistent-sorted-set.arrays/amap","new-pointers","middle","child","left-child","right-child","disjned","left-idx","right-idx","me.tonsky.persistent-sorted-set/Leaf","me.tonsky.persistent-sorted-set/->Leaf","keys-l","G__18185","G__18186","me.tonsky.persistent-sorted-set/uninitialized-hash","unused__10313__auto__","self__","G__18201","args18194","cljs.core/aclone","me.tonsky.persistent-sorted-set/BTSet","me.tonsky.persistent-sorted-set/->BTSet","root","shift","cnt","comparator","meta","_hash","this","cljs.core/pr-str*","new-meta","other","cljs.core/set?","cljs.core/count","p1__18193#","cljs.core/every?","cljs.core/contains?","h__5154__auto__","cljs.core/hash-unordered-coll","me.tonsky.persistent-sorted-set/conj","me.tonsky.persistent-sorted-set/disj","not-found","or__5045__auto__","me.tonsky.persistent-sorted-set/btset-iter","f","temp__5802__auto__","cljs.core/-reduce","start","cljs.core/rseq","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core/seq","me.tonsky.persistent-sorted-set/keys-for","set","me.tonsky.persistent-sorted-set/alter-btset","me.tonsky.persistent-sorted-set/-next-path","sub-path","G__18209","G__18210","G__18211","me.tonsky.persistent-sorted-set/-rpath","me.tonsky.persistent-sorted-set/next-path","me.tonsky.persistent-sorted-set/-prev-path","path'","G__18212","G__18213","G__18214","me.tonsky.persistent-sorted-set/prev-path","rpath","me.tonsky.persistent-sorted-set/iter","me.tonsky.persistent-sorted-set/Chunk","me.tonsky.persistent-sorted-set/->Chunk","off","end","cljs.core/ArrayChunk","val","n","val'","G__18219","G__18220","cljs.core/deref","cljs.core/reduced?","me$tonsky$persistent-sorted-set$IIter$_copy$dyn","me.tonsky.persistent-sorted-set/-copy","me.tonsky.persistent-sorted-set/IIter","me$tonsky$persistent-sorted-set$ISeek$_seek$dyn","me.tonsky.persistent-sorted-set/-seek","G__18222","me.tonsky.persistent-sorted-set/ISeek","me.tonsky.persistent-sorted-set/Iter","me.tonsky.persistent-sorted-set/->Iter","cljs.core/equiv-sequential","left'","end-idx","last","first","temp__5806__auto__","acc","new-acc","G__18248","G__18249","G__18242","G__18243","G__18244","me.tonsky.persistent-sorted-set/riter","cljs.core/nat-int?","G__18233","G__18234","temp__5808__auto__","me.tonsky.persistent-sorted-set/-seek*","me.tonsky.persistent-sorted-set/ReverseIter","me.tonsky.persistent-sorted-set/->ReverseIter","right'","G__18259","G__18260","me.tonsky.persistent-sorted-set/-rseek*","me.tonsky.persistent-sorted-set/-distance","idx-l","idx-r","G__18269","G__18270","G__18271","G__18272","me.tonsky.persistent-sorted-set/distance","path-l","path-r","me.tonsky.persistent-sorted-set/est-count","iter","me.tonsky.persistent-sorted-set/-slice","key-from","key-to","till-path","me.tonsky.persistent-sorted-set/arr-map-inplace","G__18279","me.tonsky.persistent-sorted-set/arr-partition-approx","min-len","max-len","chunk-len","cljs.core/transient","pos","rest","cljs.core.conj_BANG_","piece-len","cljs.core/to-array","cljs.core/persistent!","me.tonsky.persistent-sorted-set/sorted-arr-distinct?","al","p","e","me.tonsky.persistent-sorted-set/sorted-arr-distinct","cljs.core.into_array","roots","new-roots","new-root","G__18286","me.tonsky.persistent-sorted-set/slice","G__18295","me.tonsky.persistent-sorted-set/rslice","G__18303","G__18304","G__18305","G__18308","me.tonsky.persistent-sorted-set/seek","seq","G__18316","me.tonsky.persistent-sorted-set/from-sorted-array","me.tonsky.persistent_sorted_set.from_sorted_array","_len","_opts","leaves","p1__18313#","current-level","G__18317","cljs.core/first","p1__18314#","me.tonsky.persistent-sorted-set/from-sequential","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/sorted-set*","cljs.core/compare","G__18322","me.tonsky.persistent-sorted-set/sorted-set-by","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq18320","G__18321","cljs.core/next","self__5754__auto__","G__18325","me.tonsky.persistent-sorted-set/sorted-set","seq18324","self__5755__auto__","me.tonsky.persistent_sorted_set.sorted_set_by","me.tonsky.persistent-sorted-set/settings"],"sourcesContent":["(ns ^{:doc\n  \"A B-tree based persistent sorted set. Supports transients, custom comparators, fast iteration, efficient slices (iterator over a part of the set) and reverse slices. Almost a drop-in replacement for [[clojure.core/sorted-set]], the only difference being this one can\u2019t store nil.\"\n  :author \"Nikita Prokopov\"}\n  me.tonsky.persistent-sorted-set\n  (:refer-clojure :exclude [iter conj disj sorted-set sorted-set-by])\n  (:require\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  (:require-macros\n    [me.tonsky.persistent-sorted-set.arrays :as arrays]))\n\n; B+ tree\n; -------\n\n; Leaf:     keys[]     :: array of values\n\n; Node:     pointers[] :: links to children nodes\n;           keys[]     :: max value for whole subtree\n;                         node.keys[i] == max(node.pointers[i].keys)\n; All arrays are 16..32 elements, inclusive\n\n; BTSet:    root       :: Node or Leaf\n;           shift      :: depth - 1\n;           cnt        :: size of a set, integer, rolling\n;           comparator :: comparator used for ordering\n;           meta       :: clojure meta map\n;           _hash      :: hash code, same as for clojure collections, on-demand, cached\n\n; Path: conceptually a vector of indexes from root to leaf value, but encoded in a single number.\n;       E.g. we have path [7 30 11] representing root.pointers[7].pointers[30].keys[11].\n;       In our case level-shift is 5, meaning each index will take 5 bits:\n;       (7 << 10) | (30 << 5) | (11 << 0) = 8139\n;         00111       11110       01011\n\n; Iter:     set       :: Set this iterator belongs to\n;           left      :: Current path\n;           right     :: Right bound path (exclusive)\n;           keys      :: Cached ref for keys array for a leaf\n;           idx       :: Cached idx in keys array\n; Keys and idx are cached for fast iteration inside a leaf\"\n\n(def ^:const max-safe-path\n  \"js limitation for bit ops\"\n  (js/Math.pow 2 31))\n\n(def ^:const bits-per-level\n  \"tunable param\"\n  5)\n\n(def ^:const max-len\n  (js/Math.pow 2 bits-per-level)) ;; 32\n\n(def ^:const min-len\n  (/ max-len 2)) ;; 16\n\n(def ^:private ^:const avg-len\n  (arrays/half (+ max-len min-len))) ;; 24\n\n(def ^:const max-safe-level\n  (js/Math.floor (/ 31 bits-per-level))) ;; 6\n\n(def ^:const bit-mask\n  (- max-len 1)) ;; 0b011111 = 5 bit\n\n(def factors\n  (arrays/into-array (map #(js/Math.pow 2 %) (range 0 52 bits-per-level))))\n\n(def ^:const empty-path 0)\n\n(defn- path-get ^number [^number path ^number level]\n  (if (< level max-safe-level)\n    (-> path\n      (unsigned-bit-shift-right (* level bits-per-level))\n      (bit-and bit-mask))\n    (-> path\n      (/ (arrays/aget factors level))\n      (js/Math.floor)\n      (bit-and bit-mask))))\n\n(defn- path-set ^number [^number path ^number level ^number idx]\n  (let [smol? (and (< path max-safe-path) (< level max-safe-level))\n        old   (path-get path level)\n        minus (if smol?\n                (bit-shift-left old (* level bits-per-level))\n                (* old (arrays/aget factors level)))\n        plus  (if smol?\n                (bit-shift-left idx (* level bits-per-level))\n                (* idx (arrays/aget factors level)))]\n    (-> path\n      (- minus)\n      (+ plus))))\n\n(defn- path-inc ^number [^number path]\n  (inc path))\n\n(defn- path-dec ^number [^number path]\n  (dec path))\n\n(defn- path-cmp ^number [^number path1 ^number path2]\n  (- path1 path2))\n\n(defn- path-lt ^boolean [^number path1 ^number path2]\n  (< path1 path2))\n\n(defn- path-lte ^boolean [^number path1 ^number path2]\n  (<= path1 path2))\n\n(defn- path-eq ^boolean [^number path1 ^number path2]\n  (== path1 path2))\n\n(defn- path-same-leaf ^boolean [^number path1 ^number path2]\n  (if (and\n        (< path1 max-safe-path)\n        (< path2 max-safe-path))\n    (==\n      (unsigned-bit-shift-right path1 bits-per-level)\n      (unsigned-bit-shift-right path2 bits-per-level))\n    (== \n      (Math/floor (/ path1 max-len))\n      (Math/floor (/ path2 max-len)))))\n\n(defn- path-str [^number path]\n  (loop [res ()\n         path path]\n    (if (not= path 0)\n      (recur (cljs.core/conj res (mod path max-len)) (Math/floor (/ path max-len)))\n      (vec res))))\n\n(defn- binary-search-l [cmp arr r k]\n  (loop [l 0\n         r (long r)]\n    (if (<= l r)\n      (let [m  (arrays/half (+ l r))\n            mk (arrays/aget arr m)]\n        (if (neg? (cmp mk k))\n          (recur (inc m) r)\n          (recur l (dec m))))\n      l)))\n\n(defn- binary-search-r [cmp arr r k]\n  (loop [l 0\n         r (long r)]\n    (if (<= l r)\n      (let [m  (arrays/half (+ l r))\n            mk (arrays/aget arr m)]\n        (if (pos? (cmp mk k))\n          (recur l (dec m))\n          (recur (inc m) r)))\n      l)))\n\n(defn- lookup-exact [cmp arr key]\n  (let [arr-l (arrays/alength arr)\n        idx   (binary-search-l cmp arr (dec arr-l) key)]\n    (if (and (< idx arr-l)\n             (== 0 (cmp (arrays/aget arr idx) key)))\n      idx\n      -1)))\n\n(defn- lookup-range [cmp arr key]\n  (let [arr-l (arrays/alength arr)\n        idx   (binary-search-l cmp arr (dec arr-l) key)]\n    (if (== idx arr-l)\n      -1\n      idx)))\n\n;; Array operations\n\n(defn- cut-n-splice [arr cut-from cut-to splice-from splice-to xs]\n  (let [xs-l (arrays/alength xs)\n        l1   (- splice-from cut-from)\n        l2   (- cut-to splice-to)\n        l1xs (+ l1 xs-l)\n        new-arr (arrays/make-array (+ l1 xs-l l2))]\n    (arrays/acopy arr cut-from splice-from new-arr 0)\n    (arrays/acopy xs 0 xs-l new-arr l1)\n    (arrays/acopy arr splice-to cut-to new-arr l1xs)\n    new-arr))\n\n(defn- splice [arr splice-from splice-to xs]\n  (cut-n-splice arr 0 (arrays/alength arr) splice-from splice-to xs))\n\n(defn- insert [arr idx xs]\n  (cut-n-splice arr 0 (arrays/alength arr) idx idx xs))\n\n(defn- merge-n-split [a1 a2]\n  (let [a1-l    (arrays/alength a1)\n        a2-l    (arrays/alength a2)\n        total-l (+ a1-l a2-l)\n        r1-l    (arrays/half total-l)\n        r2-l    (- total-l r1-l)\n        r1      (arrays/make-array r1-l)\n        r2      (arrays/make-array r2-l)]\n    (if (<= a1-l r1-l)\n      (do\n        (arrays/acopy a1 0             a1-l          r1 0)\n        (arrays/acopy a2 0             (- r1-l a1-l) r1 a1-l)\n        (arrays/acopy a2 (- r1-l a1-l) a2-l          r2 0))\n      (do\n        (arrays/acopy a1 0    r1-l r1 0)\n        (arrays/acopy a1 r1-l a1-l r2 0)\n        (arrays/acopy a2 0    a2-l r2 (- a1-l r1-l))))\n    (arrays/array r1 r2)))\n\n(defn- ^boolean eq-arr [cmp a1 a1-from a1-to a2 a2-from a2-to]\n  (let [len (- a1-to a1-from)]\n    (and\n      (== len (- a2-to a2-from))\n      (loop [i 0]\n        (cond\n          (== i len)\n          true\n\n          (not (== 0 (cmp\n                       (arrays/aget a1 (+ i a1-from))\n                       (arrays/aget a2 (+ i a2-from)))))\n          false\n          \n          :else\n          (recur (inc i)))))))\n\n(defn- check-n-splice [cmp arr from to new-arr]\n  (if (eq-arr cmp arr from to new-arr 0 (arrays/alength new-arr))\n    arr\n    (splice arr from to new-arr)))\n\n(defn- return-array\n  \"Drop non-nil references and return array of arguments\"\n  ([a1]\n    (arrays/array a1))\n  ([a1 a2]\n    (if a1\n      (if a2\n        (arrays/array a1 a2)\n        (arrays/array a1))\n      (arrays/array a2)))\n  ([a1 a2 a3]\n    (if a1\n      (if a2\n        (if a3\n          (arrays/array a1 a2 a3)\n          (arrays/array a1 a2))\n        (if a3\n          (arrays/array a1 a3)\n          (arrays/array a1)))\n      (if a2\n        (if a3\n          (arrays/array a2 a3)\n          (arrays/array a2))\n        (arrays/array a3)))))\n\n;;\n\n(defprotocol INode\n  (node-lim-key       [_])\n  (node-len           [_])\n  (node-merge         [_ next])\n  (node-merge-n-split [_ next])\n  (node-lookup        [_ cmp key])\n  (node-conj          [_ cmp key])\n  (node-disj          [_ cmp key root? left right]))\n\n(defn- rotate [node root? left right]\n  (cond\n    ;; root never merges\n    root?\n    (return-array node)\n\n    ;; enough keys, nothing to merge\n    (> (node-len node) min-len)\n    (return-array left node right)\n\n    ;; left and this can be merged to one\n    (and left (<= (node-len left) min-len))\n    (return-array (node-merge left node) right)\n\n    ;; right and this can be merged to one\n    (and right (<= (node-len right) min-len))\n    (return-array left (node-merge node right))\n\n    ;; left has fewer nodes, redestribute with it\n    (and left (or (nil? right)\n                  (< (node-len left) (node-len right))))\n    (let [nodes (node-merge-n-split left node)]\n      (return-array (arrays/aget nodes 0) (arrays/aget nodes 1) right))\n\n    ;; right has fewer nodes, redestribute with it\n    :else\n    (let [nodes (node-merge-n-split node right)]\n      (return-array left (arrays/aget nodes 0) (arrays/aget nodes 1)))))\n\n(deftype Node [keys pointers]\n  INode\n  (node-lim-key [_]\n    (arrays/alast keys))\n  \n  (node-len [_]\n    (arrays/alength keys))\n  \n  (node-merge [_ next]\n    (Node. (arrays/aconcat keys (.-keys next))\n           (arrays/aconcat pointers (.-pointers next))))\n  \n  (node-merge-n-split [_ next]\n    (let [ks (merge-n-split keys     (.-keys next))\n          ps (merge-n-split pointers (.-pointers next))]\n      (return-array (Node. (arrays/aget ks 0) (arrays/aget ps 0))\n                    (Node. (arrays/aget ks 1) (arrays/aget ps 1)))))\n\n  (node-lookup [_ cmp key]\n    (let [idx (lookup-range cmp keys key)]\n      (when-not (== -1 idx)\n        (node-lookup (arrays/aget pointers idx) cmp key))))\n  \n  (node-conj [_ cmp key]\n    (let [idx   (binary-search-l cmp keys (- (arrays/alength keys) 2) key)\n          nodes (node-conj (arrays/aget pointers idx) cmp key)]\n      (when nodes\n        (let [new-keys     (check-n-splice cmp keys     idx (inc idx) (arrays/amap node-lim-key nodes))\n              new-pointers (splice             pointers idx (inc idx) nodes)]\n          (if (<= (arrays/alength new-pointers) max-len)\n            ;; ok as is\n            (arrays/array (Node. new-keys new-pointers))\n            ;; gotta split it up\n            (let [middle  (arrays/half (arrays/alength new-pointers))]\n              (arrays/array\n                (Node. (.slice new-keys     0 middle)\n                       (.slice new-pointers 0 middle))\n                (Node. (.slice new-keys     middle)\n                       (.slice new-pointers middle)))))))))\n\n  (node-disj [_ cmp key root? left right]\n    (let [idx (lookup-range cmp keys key)]\n      (when-not (== -1 idx) ;; short-circuit, key not here\n        (let [child       (arrays/aget pointers idx)\n              left-child  (when (>= (dec idx) 0)\n                            (arrays/aget pointers (dec idx)))\n              right-child (when (< (inc idx) (arrays/alength pointers))\n                            (arrays/aget pointers (inc idx)))\n              disjned     (node-disj child cmp key false left-child right-child)]\n          (when disjned     ;; short-circuit, key not here\n            (let [left-idx     (if left-child  (dec idx) idx)\n                  right-idx    (if right-child (+ 2 idx) (+ 1 idx))\n                  new-keys     (check-n-splice cmp keys     left-idx right-idx (arrays/amap node-lim-key disjned))\n                  new-pointers (splice             pointers left-idx right-idx disjned)]\n              (rotate (Node. new-keys new-pointers) root? left right))))))))\n\n(deftype Leaf [keys]\n  INode\n  (node-lim-key [_]\n    (arrays/alast keys))\n;;   Object\n;;   (toString [_] (pr-str* (vec keys)))\n  \n  (node-len [_]\n    (arrays/alength keys))\n  \n  (node-merge [_ next]\n    (Leaf. (arrays/aconcat keys (.-keys next))))\n  \n  (node-merge-n-split [_ next]\n    (let [ks (merge-n-split keys (.-keys next))]\n      (return-array (Leaf. (arrays/aget ks 0))\n                    (Leaf. (arrays/aget ks 1)))))\n  \n  (node-lookup [_ cmp key]\n    (let [idx (lookup-exact cmp keys key)]\n      (when-not (== -1 idx)\n        (arrays/aget keys idx))))\n\n  (node-conj [_ cmp key]\n    (let [idx    (binary-search-l cmp keys (dec (arrays/alength keys)) key)\n          keys-l (arrays/alength keys)]\n      (cond\n        ;; element already here\n        (and (< idx keys-l)\n             (== 0 (cmp key (arrays/aget keys idx))))\n          nil\n      \n        ;; splitting\n        (== keys-l max-len)\n          (let [middle (arrays/half (inc keys-l))]\n            (if (> idx middle)\n              ;; new key goes to the second half\n              (arrays/array\n                (Leaf. (.slice keys 0 middle))\n                (Leaf. (cut-n-splice keys middle keys-l idx idx (arrays/array key))))\n              ;; new key goes to the first half\n              (arrays/array\n                (Leaf. (cut-n-splice keys 0 middle idx idx (arrays/array key)))\n                (Leaf. (.slice keys middle keys-l)))))\n       \n        ;; ok as is\n        :else\n          (arrays/array (Leaf. (splice keys idx idx (arrays/array key)))))))\n  \n  (node-disj [_ cmp key root? left right]\n    (let [idx (lookup-exact cmp keys key)]\n      (when-not (== -1 idx) ;; key is here\n        (let [new-keys (splice keys idx (inc idx) (arrays/array))]\n          (rotate (Leaf. new-keys) root? left right))))))\n\n;; BTSet\n\n(declare conj disj btset-iter)\n\n(def ^:private ^:const uninitialized-hash nil)\n\n(deftype BTSet [root shift cnt comparator meta ^:mutable _hash]\n  Object\n  (toString [this] (pr-str* this))\n\n  ICloneable\n  (-clone [_] (BTSet. root shift cnt comparator meta _hash))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (BTSet. root shift cnt comparator new-meta _hash))\n\n  IMeta\n  (-meta [_] meta)\n\n  IEmptyableCollection\n  (-empty [_] (BTSet. (Leaf. (arrays/array)) 0 0 comparator meta uninitialized-hash))\n\n  IEquiv\n  (-equiv [this other]\n    (and\n      (set? other)\n      (== cnt (count other))\n      (every? #(contains? this %) other)))\n\n  IHash\n  (-hash [this] (caching-hash this hash-unordered-coll _hash))\n\n  ICollection\n  (-conj [this key] (conj this key comparator))\n\n  ISet\n  (-disjoin [this key] (disj this key comparator))\n\n  ILookup \n  (-lookup [_ k]\n    (node-lookup root comparator k))\n  (-lookup [_ k not-found]\n    (or (node-lookup root comparator k) not-found))\n\n  ISeqable\n  (-seq [this] (btset-iter this))\n\n  IReduce\n  (-reduce [this f]\n    (if-let [i (btset-iter this)]\n      (-reduce i f)\n      (f)))\n  (-reduce [this f start]\n    (if-let [i (btset-iter this)]\n      (-reduce i f start)\n      start))\n           \n  IReversible\n  (-rseq [this]\n    (rseq (btset-iter this)))\n\n  ; ISorted\n  ; (-sorted-seq [this ascending?])\n  ; (-sorted-seq-from [this k ascending?])\n  ; (-entry-key [this entry] entry)\n  ; (-comparator [this] comparator)\n\n  ICounted\n  (-count [_] cnt)\n\n  IEditableCollection\n  (-as-transient [this] this)\n\n  ITransientCollection\n  (-conj! [this key] (conj this key comparator))\n  (-persistent! [this] this)\n\n  ITransientSet\n  (-disjoin! [this key] (disj this key comparator))\n\n  IFn\n  (-invoke [this k] (-lookup this k))\n  (-invoke [this k not-found] (-lookup this k not-found))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts (seq this))))\n  \n(defn- keys-for [set path]\n  (loop [level (.-shift set)\n         node  (.-root set)]\n    (if (pos? level)\n      (recur\n        (dec level)\n        (arrays/aget (.-pointers node) (path-get path level)))\n      (.-keys node))))\n\n(defn- alter-btset [set root shift cnt]\n  (BTSet. root shift cnt (.-comparator set) (.-meta set) uninitialized-hash))\n\n\n;; iteration\n\n(defn- -next-path [node ^number path ^number level]\n  (let [idx (path-get path level)]\n    (if (pos? level)\n      ;; inner node\n      (let [sub-path (-next-path (arrays/aget (.-pointers node) idx) path (dec level))]\n        (if (nil? sub-path)\n          ;; nested node overflow\n          (if (< (inc idx) (arrays/alength (.-pointers node)))\n            ;; advance current node idx, reset subsequent indexes\n            (path-set empty-path level (inc idx))\n            ;; current node overflow\n            nil)\n          ;; keep current idx\n          (path-set sub-path level idx)))\n      ;; leaf\n      (if (< (inc idx) (arrays/alength (.-keys node)))\n        ;; advance leaf idx\n        (path-set empty-path 0 (inc idx))\n        ;; leaf overflow\n        nil))))\n\n(defn- -rpath\n  \"Returns rightmost path possible starting from node and going deeper\"\n  [node ^number path ^number level]\n  (loop [node  node\n         path  path\n         level level]\n    (if (pos? level)\n      ;; inner node\n      (recur\n        (arrays/alast (.-pointers node))\n        (path-set path level (dec (arrays/alength (.-pointers node))))\n        (dec level))\n      ;; leaf\n      (path-set path 0 (dec (arrays/alength (.-keys node)))))))\n\n(defn- next-path\n  \"Returns path representing next item after `path` in natural traversal order.\n   Will overflow at leaf if at the end of the tree\"\n  [set ^number path]\n  (if (neg? path)\n    empty-path\n    (or\n      (-next-path (.-root set) path (.-shift set))\n      (path-inc (-rpath (.-root set) empty-path (.-shift set))))))\n\n(defn- -prev-path [node ^number path ^number level]\n  (let [idx (path-get path level)]\n    (cond\n      ;; leaf overflow\n      (and (== 0 level) (== 0 idx))\n      nil\n      \n      ;; leaf\n      (== 0 level)\n      (path-set empty-path 0 (dec idx))\n      \n      ;; branch that was overflow before\n      (>= idx (node-len node))\n      (-rpath node path level)\n\n      :else\n      (let [path' (-prev-path (arrays/aget (.-pointers node) idx) path (dec level))]\n        (cond\n          ;; no sub-overflow, keep current idx\n          (some? path')\n          (path-set path' level idx)\n          \n          ;; nested overflow + this node overflow\n          (== 0 idx)\n          nil\n          \n          ;; nested overflow, advance current idx, reset subsequent indexes\n          :else\n          (let [path' (-rpath (arrays/aget (.-pointers node) (dec idx)) path (dec level))]\n            (path-set path' level (dec idx))))))))\n\n(defn- prev-path\n  \"Returns path representing previous item before `path` in natural traversal order.\n   Will overflow at leaf if at beginning of tree\"\n  [set ^number path]\n  (if (> (path-get path (inc (.-shift set))) 0) ;; overflow\n    (-rpath (.-root set) path (.-shift set))\n    (or\n      (-prev-path (.-root set) path (.-shift set))\n      (path-dec empty-path))))\n\n(declare iter riter)\n\n(defn- btset-iter\n  \"Iterator that represents the whole set\"\n  [set]\n  (when (pos? (node-len (.-root set)))\n    (let [left  empty-path\n          rpath (-rpath (.-root set) empty-path (.-shift set))\n          right (next-path set rpath)]\n      (iter set left right))))\n\n;; replace with cljs.core/ArrayChunk after https://dev.clojure.org/jira/browse/CLJS-2470\n(deftype Chunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [this i]\n    (aget arr (+ off i)))\n  \n  (-nth [this i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [this]\n    (if (== off end)\n      (throw (js/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [this f]\n    (if (== off end)\n      (f)\n      (-reduce (-drop-first this) f (aget arr off))))\n  \n  (-reduce [this f start]\n    (loop [val start, n off]\n      (if (< n end)\n        (let [val' (f val (aget arr n))]\n          (if (reduced? val')\n            @val'\n            (recur val' (inc n))))\n        val))))\n\n(defprotocol IIter\n  (-copy [this left right]))\n\n(defprotocol ISeek\n  (-seek\n    [this key]\n    [this key comparator]))\n\n(declare -seek* -rseek*)\n\n(deftype Iter [set left right keys idx]\n  IIter\n  (-copy [_ l r]\n    (Iter. set l r (keys-for set l) (path-get l 0)))\n\n  IEquiv\n  (-equiv [this other] (equiv-sequential this other))\n\n  ISequential\n  ISeqable\n  (-seq [this] (when keys this))\n\n  ISeq\n  (-first [this]\n    (when keys\n      (arrays/aget keys idx)))\n\n  (-rest [this]\n    (or (-next this) ()))\n\n  INext\n  (-next [this]\n    (when keys\n      (if (< (inc idx) (arrays/alength keys))\n        ;; can use cached array to move forward\n        (let [left' (path-inc left)]\n          (when (path-lt left' right)\n            (Iter. set left' right keys (inc idx))))\n        (let [left' (next-path set left)]\n          (when (path-lt left' right)\n            (-copy this left' right))))))\n\n  IChunkedSeq\n  (-chunked-first [this]\n    (let [end-idx (if (path-same-leaf left right)\n                    ;; right is in the same node\n                    (path-get right 0)\n                    ;; right is in a different node\n                    (arrays/alength keys))]\n      (Chunk. keys idx end-idx)))\n\n  (-chunked-rest [this]\n    (or (-chunked-next this) ()))\n\n  IChunkedNext\n  (-chunked-next [this]\n    (let [last  (path-set left 0 (dec (arrays/alength keys)))\n          left' (next-path set last)]\n      (when (path-lt left' right)\n        (-copy this left' right))))\n           \n  IReduce\n  (-reduce [this f]\n    (if (nil? keys)\n      (f)\n      (let [first (-first this)]\n        (if-some [next (-next this)]\n          (-reduce next f first)\n          first))))\n\n  (-reduce [this f start]\n    (loop [left left\n           keys keys\n           idx  idx\n           acc  start]\n      (if (nil? keys)\n        acc\n        (let [new-acc (f acc (arrays/aget keys idx))]\n          (cond\n            (reduced? new-acc)\n            @new-acc\n\n            (< (inc idx) (arrays/alength keys)) ;; can use cached array to move forward\n            (let [left' (path-inc left)]\n              (if (path-lt left' right)\n                (recur left' keys (inc idx) new-acc)\n                new-acc))\n\n            :else\n            (let [left' (next-path set left)]\n              (if (path-lt left' right)\n                (recur left' (keys-for set left') (path-get left' 0) new-acc)\n                new-acc)))))))\n\n  IReversible\n  (-rseq [this]\n    (when keys\n      (riter set (prev-path set left) (prev-path set right))))\n\n  ISeek\n  (-seek [this key]\n    (-seek this key (.-comparator set)))\n  \n  (-seek [this key cmp]\n    (cond\n      (nil? key)\n      (throw (js/Error. \"seek can't be called with a nil key!\"))\n      \n      (nat-int? (cmp (arrays/aget keys idx) key))\n      this\n      \n      :else\n      (when-some [left' (-seek* set key cmp)]\n        (Iter. set left' right (keys-for set left') (path-get left' 0)))))\n\n  Object\n  (toString [this] (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts (seq this))))\n\n(defn iter [set left right]\n  (Iter. set left right (keys-for set left) (path-get left 0)))\n\n;; reverse iteration\n\n(deftype ReverseIter [set left right keys idx]\n  IIter\n  (-copy [_ l r]\n    (ReverseIter. set l r (keys-for set r) (path-get r 0)))\n\n  IEquiv\n  (-equiv [this other] (equiv-sequential this other))\n\n  ISequential\n  ISeqable\n  (-seq [this] (when keys this))\n\n  ISeq\n  (-first [this]\n    (when keys\n      (arrays/aget keys idx)))\n\n  (-rest [this]\n    (or (-next this) ()))\n\n  INext\n  (-next [this]\n    (when keys\n      (if (> idx 0)\n        ;; can use cached array to advance\n        (let [right' (path-dec right)]\n          (when (path-lt left right')\n            (ReverseIter. set left right' keys (dec idx))))\n        (let [right' (prev-path set right)]\n          (when (path-lt left right')\n            (-copy this left right'))))))\n\n  IReversible\n  (-rseq [this]\n    (when keys\n      (iter set (next-path set left) (next-path set right))))\n\n  ISeek\n  (-seek [this key]\n    (-seek this key (.-comparator set)))\n  \n  (-seek [this key cmp]\n    (cond\n      (nil? key)\n      (throw (js/Error. \"seek can't be called with a nil key!\"))\n      \n      (nat-int? (cmp key (arrays/aget keys idx)))\n      this\n      \n      :else\n      (let [right' (prev-path set (-rseek* set key cmp))]\n        (when (and\n                (nat-int? right')\n                (path-lte left right')\n                (path-lt  right' right))\n          (ReverseIter. set left right' (keys-for set right') (path-get right' 0))))))\n\n  Object\n  (toString [this] (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts (seq this))))\n\n(defn riter [set left right]\n  (ReverseIter. set left right (keys-for set right) (path-get right 0)))\n\n;; distance\n\n(defn- -distance [node left right level]\n  (let [idx-l (path-get left level)\n        idx-r (path-get right level)]\n    (if (pos? level)\n      ;; inner node\n      (if (== idx-l idx-r)\n        (-distance (arrays/aget (.-pointers node) idx-l) left right (dec level))\n        (loop [level level\n               res   (- idx-r idx-l)]\n          (if (== 0 level)\n            res\n            (recur (dec level) (* res avg-len)))))\n      (- idx-r idx-l))))\n\n(defn- distance [set path-l path-r]\n  (cond\n    (path-eq path-l path-r)\n    0\n    \n    (path-eq (path-inc path-l) path-r)\n    1\n    \n    (path-eq (next-path set path-l) path-r)\n    1\n    \n    :else\n    (-distance (.-root set) path-l path-r (.-shift set))))\n\n(defn est-count [iter]\n  (distance (.-set iter) (.-left iter) (.-right iter)))\n\n\n;; Slicing\n\n(defn- -seek*\n  \"Returns path to first element >= key,\n   or -1 if all elements in a set < key\"\n  [set key comparator]\n  (if (nil? key)\n    empty-path\n    (loop [node  (.-root set)\n           path  empty-path\n           level (.-shift set)]\n      (let [keys-l (node-len node)]\n        (if (== 0 level)\n          (let [keys (.-keys node)\n                idx  (binary-search-l comparator keys (dec keys-l) key)]\n            (if (== keys-l idx)\n              nil\n              (path-set path 0 idx)))\n          (let [keys (.-keys node)\n                idx  (binary-search-l comparator keys (- keys-l 2) key)]\n            (recur\n              (arrays/aget (.-pointers node) idx)\n              (path-set path level idx)\n              (dec level))))))))\n\n(defn- -rseek*\n  \"Returns path to the first element that is > key.\n   If all elements in a set are <= key, returns `(-rpath set) + 1`.\n   It\u2019s a virtual path that is bigger than any path in a tree\"\n  [set key comparator]\n  (if (nil? key)\n    (path-inc (-rpath (.-root set) empty-path (.-shift set)))\n    (loop [node  (.-root set)\n           path  empty-path\n           level (.-shift set)]\n      (let [keys-l (node-len node)]\n        (if (== 0 level)\n          (let [keys (.-keys node)\n                idx  (binary-search-r comparator keys (dec keys-l) key)\n                res  (path-set path 0 idx)]\n            res)\n          (let [keys (.-keys node)\n                idx  (binary-search-r comparator keys (- keys-l 2) key)\n                res  (path-set path level idx)]\n            (recur\n              (arrays/aget (.-pointers node) idx)\n              res\n              (dec level))))))))\n\n(defn- -slice [set key-from key-to comparator]\n  (when-some [path (-seek* set key-from comparator)]\n    (let [till-path (-rseek* set key-to comparator)]\n      (when (path-lt path till-path)\n        (Iter. set path till-path (keys-for set path) (path-get path 0))))))\n\n(defn- arr-map-inplace [f arr]\n  (let [len (arrays/alength arr)]\n    (loop [i 0]\n      (when (< i len)\n        (arrays/aset arr i (f (arrays/aget arr i)))\n        (recur (inc i))))\n    arr))\n\n\n(defn- arr-partition-approx\n  \"Splits `arr` into arrays of size between min-len and max-len,\n   trying to stick to (min+max)/2\"\n  [min-len max-len arr]\n  (let [chunk-len avg-len\n        len       (arrays/alength arr)\n        acc       (transient [])]\n    (when (pos? len)\n      (loop [pos 0]\n        (let [rest (- len pos)]\n          (cond\n            (<= rest max-len)\n              (conj! acc (.slice arr pos))\n            (>= rest (+ chunk-len min-len))\n              (do\n                (conj! acc (.slice arr pos (+ pos chunk-len)))\n                (recur (+ pos chunk-len)))\n            :else\n              (let [piece-len (arrays/half rest)]\n                (conj! acc (.slice arr pos (+ pos piece-len)))\n                (recur (+ pos piece-len)))))))\n    (to-array (persistent! acc))))\n\n\n(defn- sorted-arr-distinct? [arr cmp]\n  (let [al (arrays/alength arr)]\n    (if (<= al 1)\n      true\n      (loop [i 1\n             p (arrays/aget arr 0)]\n        (if (>= i al)\n          true\n          (let [e (arrays/aget arr i)]\n            (if (== 0 (cmp e p))\n              false\n              (recur (inc i) e))))))))\n\n\n(defn- sorted-arr-distinct\n  \"Filter out repetitive values in a sorted array.\n   Optimized for no-duplicates case\"\n  [arr cmp]\n  (if (sorted-arr-distinct? arr cmp)\n    arr\n    (let [al (arrays/alength arr)]\n      (loop [acc (transient [(arrays/aget arr 0)])\n             i   1\n             p   (arrays/aget arr 0)]\n        (if (>= i al)\n          (into-array (persistent! acc))\n          (let [e (arrays/aget arr i)]\n            (if (== 0 (cmp e p))\n              (recur acc (inc i) e)\n              (recur (conj! acc e) (inc i) e))))))))\n\n\n;; Public interface\n\n(defn conj\n  \"Analogue to [[clojure.core/conj]] with comparator that overrides the one stored in set.\"\n  [set key cmp]\n  (let [roots (node-conj (.-root set) cmp key)]\n    (cond\n      ;; tree not changed\n      (nil? roots)\n        set\n     \n      ;; keeping single root\n      (== (arrays/alength roots) 1)\n        (alter-btset set\n          (arrays/aget roots 0)\n          (.-shift set)\n          (inc (.-cnt set)))\n     \n      ;; introducing new root\n      :else\n        (alter-btset set\n          (Node. (arrays/amap node-lim-key roots) roots)\n          (inc (.-shift set))\n          (inc (.-cnt set))))))\n\n\n(defn disj\n  \"Analogue to [[clojure.core/disj]] with comparator that overrides the one stored in set.\"\n  [set key cmp]\n  (let [new-roots (node-disj (.-root set) cmp key true nil nil)]\n    (if (nil? new-roots) ;; nothing changed, key wasn't in the set\n      set\n      (let [new-root (arrays/aget new-roots 0)]\n        (if (and (instance? Node new-root)\n                 (== 1 (arrays/alength (.-pointers new-root))))\n          \n          ;; root has one child, make him new root\n          (alter-btset set\n            (arrays/aget (.-pointers new-root) 0)\n            (dec (.-shift set))\n            (dec (.-cnt set)))\n          \n          ;; keeping root level\n          (alter-btset set\n            new-root\n            (.-shift set)\n            (dec (.-cnt set))))))))\n\n\n(defn slice\n  \"An iterator for part of the set with provided boundaries.\n   `(slice set from to)` returns iterator for all Xs where from <= X <= to.\n   Optionally pass in comparator that will override the one that set uses. Supports efficient [[clojure.core/rseq]].\"\n  ([set key-from key-to]\n    (-slice set key-from key-to (.-comparator set)))\n  ([set key-from key-to comparator]\n    (-slice set key-from key-to comparator)))\n\n\n(defn rslice\n  \"A reverse iterator for part of the set with provided boundaries.\n   `(rslice set from to)` returns backwards iterator for all Xs where from <= X <= to.\n   Optionally pass in comparator that will override the one that set uses. Supports efficient [[clojure.core/rseq]].\"\n  ([set key]\n    (some-> (-slice set key key (.-comparator set)) rseq))\n  ([set key-from key-to]\n    (some-> (-slice set key-to key-from (.-comparator set)) rseq))\n  ([set key-from key-to comparator]\n    (some-> (-slice set key-to key-from comparator) rseq)))\n\n\n(defn seek\n  \"An efficient way to seek to a specific key in a seq (either returned by [[clojure.core.seq]] or a slice.)\n  `(seek (seq set) to)` returns iterator for all Xs where to <= X.\n  Optionally pass in comparator that will override the one that set uses.\"\n  ([seq to]\n   (-seek seq to))\n  ([seq to cmp]\n   (-seek seq to cmp)))\n\n\n(defn from-sorted-array\n  \"Fast path to create a set if you already have a sorted array of elements on your hands.\"\n  ([cmp arr]\n   (from-sorted-array cmp arr (arrays/alength arr) {}))\n  ([cmp arr _len]\n   (from-sorted-array cmp arr _len {}))\n  ([cmp arr _len _opts]\n   (let [leaves (->> arr\n                    (arr-partition-approx min-len max-len)\n                    (arr-map-inplace #(Leaf. %)))]\n     (loop [current-level leaves\n            shift 0]\n       (case (count current-level)\n         0 (BTSet. (Leaf. (arrays/array)) 0 0 cmp nil uninitialized-hash)\n         1 (BTSet. (first current-level) shift (arrays/alength arr) cmp nil uninitialized-hash)\n         (recur\n           (->> current-level\n             (arr-partition-approx min-len max-len)\n             (arr-map-inplace #(Node. (arrays/amap node-lim-key %) %)))\n           (inc shift)))))))\n\n\n(defn from-sequential\n  \"Create a set with custom comparator and a collection of keys. Useful when you don\u2019t want to call [[clojure.core/apply]] on [[sorted-set-by]].\"\n  [cmp seq]\n  (let [arr (-> (into-array seq) (arrays/asort cmp) (sorted-arr-distinct cmp))]\n    (from-sorted-array cmp arr)))\n\n\n(defn sorted-set*\n  \"Create a set with custom comparator, metadata and settings\"\n  [opts]\n  (BTSet. (Leaf. (arrays/array)) 0 0 (or (:cmp opts) compare) (:meta opts) uninitialized-hash))\n\n\n(defn sorted-set-by\n  ([cmp] (BTSet. (Leaf. (arrays/array)) 0 0 cmp nil uninitialized-hash))\n  ([cmp & keys] (from-sequential cmp keys)))\n\n\n(defn sorted-set\n  ([] (sorted-set-by compare))\n  ([& keys] (from-sequential compare keys)))\n\n(defn settings [set]\n  {:branching-factor max-len\n   :ref-type :strong})"],"x_google_ignoreList":[0]}