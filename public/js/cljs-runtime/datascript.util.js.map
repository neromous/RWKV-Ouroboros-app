{"version":3,"sources":["datascript/util.cljc"],"mappings":";AAKA,oCAAA,pCAAeA;AAOf,4BAAA,5BAAOC,gEAAWC;AAAlB,AACE,OAACC,mBAAS,CAAA,OAAkBD;;AAG3B,gCAAA,hCAAOE,wEAAeC,EAAEC;AAAxB,AACE,IAAMC,IAAE,WAAA,XAAWF;IACbG,IAAE,AAACC,gBAAMF;AADf,AAEE,GACE,CAAGC,IAAEF;AAAG,sDAAA,/CAACI,6CAAKH,MAAID;;AADpB,GAEE,CAAGE,IAAEF;AAAG,oDAAK,AAACK,8CAAMC,cAAI,uDAAA,vDAACC,+CAAO,CAAGP,IAAEE,sDAASD;;AAFhD,AAGUA;;;;;AAEjB,AAAA,yBAAA,iCAAAO,1DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAMD;AAAN,AAEG,OAACE,qDACgB,AAAU,KAAAC;;;AAH9B,CAAA,uDAAA,vDAAMH,kEAIFI;AAJJ,AAcM,OAACC,eACC,yGAAA,oHAAA,2IAAA,4IAAA,zaACM,mBAAA,lBAAK,QAAA,PAAGD,hCACV,sDAAA,tDAAChB,0IACK,0BAAA,1BAACH,9BAAc,8DAAA,9DAACG,oJAChB,0BAAA,1BAACH,DAAc,mCAAA,pCAAiB,8CAAA,5EAAgB,qFAAA,rFAACG,2KACjD,0BAAA,1BAACH,DAAc,mCAAA,pCAAiB,+CAAA,7EAAgB,sFAAA,tFAACG,0KACjD,0BAAA,1BAACH,9BAAc,8DAAA,9DAACG,8IACpB,0BAAA,1BAACH,9BAAc,8DAAA,9DAACG,8IAChB,0BAAA,1BAACH,9BAAc,8DAAA,9DAACG;;;AAvB9B,CAAA,iDAAA,jDAAMY;;AAAN,AAyBA;;;qCAAA,rCAAMM,kFAEHC;AAFH,iBAMe,+FAAA,IAAA,nGAACb,6CAAK,4CAAKa,lGACb,iHAAA,jHAACC,RACD,iIAAA","names":["datascript.util/*debug*","datascript.util/rand-bits","pow","cljs.core/rand-int","datascript.util/to-hex-string","n","l","s","c","cljs.core/count","cljs.core.subs","cljs.core.apply","cljs.core/str","cljs.core.repeat","var_args","G__18063","datascript.util/squuid","js/Error","datascript.util.squuid","js/Date","msec","cljs.core/uuid","datascript.util/squuid-time-millis","uuid","js/parseInt"],"sourcesContent":["(ns datascript.util\n  #?(:clj\n     (:import\n       [java.util UUID])))\n\n(def ^:dynamic *debug*\n  false)\n\n(defmacro log [& body]\n  `(when *debug*\n     (println ~@body)))\n\n(defn- rand-bits [pow]\n  (rand-int (bit-shift-left 1 pow)))\n\n#?(:cljs\n   (defn- to-hex-string [n l]\n     (let [s (.toString n 16)\n           c (count s)]\n       (cond\n         (> c l) (subs s 0 l)\n         (< c l) (str (apply str (repeat (- l c) \"0\")) s)\n         :else   s))))\n\n(defn squuid\n  ([]\n   (squuid #?(:clj  (System/currentTimeMillis)\n              :cljs (.getTime (js/Date.)))))\n  ([msec]\n   #?(:clj\n      (let [uuid     (UUID/randomUUID)\n            time     (int (/ msec 1000))\n            high     (.getMostSignificantBits uuid)\n            low      (.getLeastSignificantBits uuid)\n            new-high (bit-or (bit-and high 0x00000000FFFFFFFF)\n                       (bit-shift-left time 32)) ]\n        (UUID. new-high low))\n      :cljs\n      (uuid\n        (str\n          (-> (int (/ msec 1000))\n            (to-hex-string 8))\n          \"-\" (-> (rand-bits 16) (to-hex-string 4))\n          \"-\" (-> (rand-bits 16) (bit-and 0x0FFF) (bit-or 0x4000) (to-hex-string 4))\n          \"-\" (-> (rand-bits 16) (bit-and 0x3FFF) (bit-or 0x8000) (to-hex-string 4))\n          \"-\" (-> (rand-bits 16) (to-hex-string 4))\n          (-> (rand-bits 16) (to-hex-string 4))\n          (-> (rand-bits 16) (to-hex-string 4)))))))\n\n(defn squuid-time-millis\n  \"Returns time that was used in [[squuid]] call, in milliseconds, rounded to the closest second.\"\n  [uuid]\n  #?(:clj (-> (.getMostSignificantBits ^UUID uuid)\n            (bit-shift-right 32)\n            (* 1000))\n     :cljs (-> (subs (str uuid) 0 8)\n             (js/parseInt 16)\n             (* 1000))))\n"],"x_google_ignoreList":[0]}