{
"version":3,
"file":"goog.debug.asyncstacktag.js",
"lineCount":25,
"mappings":"AAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AAAA,cAAA;AAYAA,MAAKC,CAAAA,MAAL,CAAY,0BAAZ,CAAA;AACAD,MAAKC,CAAAA,MAAOC,CAAAA,sBAAZ,EAAA;AAEA,QAAM,CAACC,YAAD,CAAA,GAAiBH,IAAKI,CAAAA,OAAL,CAAa,cAAb,CAAvB;AAOA,QAAMC,aACFL,IAAKM,CAAAA,KAAL,IAAcN,IAAKO,CAAAA,MAAOC,CAAAA,OAA1B,IAAqCR,IAAKO,CAAAA,MAAOC,CAAAA,OAAQH,CAAAA,UAAzD,GACAL,IAAKO,CAAAA,MAAOC,CAAAA,OAAQH,CAAAA,UAAWI,CAAAA,IAA/B,CAAoCT,IAAKO,CAAAA,MAAOC,CAAAA,OAAhD,CADA,GAEAE,SAHJ;AAMA,QAAMC,sBAAsBN,UAAA,GAAaO,MAAA,CAAO,aAAP,CAAb,GAAqCF,SAAjE;AAUAG,UAASA,KAAI,CAACC,EAAD,EAAKC,IAAA,GAAO,WAAZ,CAAyB;AACpC,QAAI,CAACf,IAAKM,CAAAA,KAAV,IAAmB,CAACD,UAApB;AAAgC,aAAOS,EAAP;AAAhC;AAEA,QAAIA,EAAA,CAAGX,YAAA,CAAaQ,mBAAb,CAAH,CAAJ;AACE,aAAOG,EAAP;AADF;AAGA,UAAME,cAAcX,UAAA,CAAWS,EAAGC,CAAAA,IAAd,IAAsBA,IAAtB,CAApB;AACAE,YAASA,UAAS,CAAC,GAAGC,IAAJ,CAAU;AAC1B,aAAOF,WAAA,CAAY,KAAZ,CAAA,CAAmB,EAAA,IAAMF,EAAGK,CAAAA,IAAH,CAA0B,IAA1B,EAAiC,GAAGD,IAApC,CAAzB,CAAP;AAD0B;AAG5BD,aAAA,CAAUd,YAAA,CAAaQ,mBAAb,CAAV,CAAA,GAA+CK,WAA/C;AACA,WAAOC,SAAP;AAXoC;AActCG,SAAA,GAAU,CACRP,IADQ,EAAV;AApDA,SAAA,OAAA;AAAA,CAAA,CAAA;;",
"sources":["goog/debug/asyncstacktag.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilites for creating and running console tasks which improve\n * stack traces of asynchronous code using the Async Stack Tagging API\n * (https://developer.chrome.com/docs/devtools/console/api/#createtask).\n */\n\ngoog.module('goog.debug.asyncStackTag');\ngoog.module.declareLegacyNamespace();\n\nconst {assertExists} = goog.require('goog.asserts');\n\n/**\n * Store a local variable with the createTask function. This prevents tests that\n * overwrite console from failing.\n * @const {(function(string): ?)|undefined}\n */\nconst createTask =\n    goog.DEBUG && goog.global.console && goog.global.console.createTask ?\n    goog.global.console.createTask.bind(goog.global.console) :\n    undefined;\n\n/** @const {symbol|undefined} */\nconst CONSOLE_TASK_SYMBOL = createTask ? Symbol('consoleTask') : undefined;\n\n/**\n * Utility to wrap the function to tag its stack at this point. If the function\n * has already been tagged, this does nothing.\n * @param {!T} fn\n * @param {string=} name\n * @return {!T}\n * @template T\n */\nfunction wrap(fn, name = 'anonymous') {\n  if (!goog.DEBUG || !createTask) return fn;\n\n  if (fn[assertExists(CONSOLE_TASK_SYMBOL)]) {\n    return fn;\n  }\n  const consoleTask = createTask(fn.name || name);\n  function wrappedFn(...args) {\n    return consoleTask['run'](() => fn.call(/** @type {?} */ (this), ...args));\n  }\n  wrappedFn[assertExists(CONSOLE_TASK_SYMBOL)] = consoleTask;\n  return wrappedFn;\n}\n\nexports = {\n  wrap,\n};"],
"names":["goog","module","declareLegacyNamespace","assertExists","require","createTask","DEBUG","global","console","bind","undefined","CONSOLE_TASK_SYMBOL","Symbol","wrap","fn","name","consoleTask","wrappedFn","args","call","exports"]
}
