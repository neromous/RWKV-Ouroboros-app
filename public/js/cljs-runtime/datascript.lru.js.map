{"version":3,"sources":["datascript/lru.cljc"],"mappings":";AAEA,AAAA;AAAA,AAGI,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,qEAAA,rEAASI,gFAEEO,MAAKC,EAAEC;;AAFlB,AAAA,gBAAA,ZAEWF;AAFX,AAEqB,QAACG,yDAAAA,wEAAAA,jBAAUH,oDAAAA,1CAAKC,oDAAAA,lDAAEC,oDAAAA;;;AAFvC,CAAA,AAAA,mFAAA,nFAAST,8FAGUW,EAAEH;;AAHrB,AAAA,YAAA,RAGmBG;AAHnB,AAGwB,OAACC,+BAAeV,iBAAUM;;;AAHlD,CAAA,AAAA,iEAAA,jEAASR,4EAKGW,EAAEH;;AALd,AAAA,YAAA,RAKYG;AALZ,AAKoB,4CAAA,rCAACE,kBAAQX,iBAAUM;;;AALvC,CAAA,AAAA,iEAAA,jEAASR,4EAMGW,EAAEH,EAAEM;;AANhB,AAAA,YAAA,RAMYH;AANZ,AAMoB,OAACE,kBAAQX,iBAAUM,EAAEM;;;AANzC,CAAA,AAAA,6EAAA,7EAASd,wFAQMW,EAAEI,OAAOC;;AARxB,AAAA,YAAA,RAQeL;AARf,AASc,OAACM,qBAAWf,iBAAUa,OAAOC;;;AAT3C,CAAA,8BAAA,9BAAShB;AAAT,AAAA,AAAA;;;AAAA,CAAA,oCAAA,pCAASA;;AAAT,CAAA,uCAAA,vCAASA;;AAAT,CAAA,4CAAA,WAAAJ,mBAAAC,qBAAAC,/FAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;0BAAA,1BAASI,4DAAKC,UAAUC,QAAQC,QAAQC,IAAIC;AAA5C,AAAA,YAAAN,mBAAcE,UAAUC,QAAQC,QAAQC,IAAIC;;;AAAnCN,AAoBb,2BAAA,3BAAMU,8DAAgBQ,IAAIV,EAAEC;AAA5B,AACE,IAAMP,YAAU,AAAagB;IACvBf,UAAU,AAAWe;IACrBd,UAAU,AAAWc;IACrBb,MAAU,AAAOa;IACjBZ,QAAU,AAASY;AAJzB,AAKE,IAAAC,qBAAW,iFAAA,4BAAA,5GAACf,wCAAAA,gDAAAA,VAAQI,4BAAAA;AAApB,AAAA,oBAAAW;AAAA,QAAAA,JAASC;AAAT,AACE,YAAApB,mBACEE,uGACIC,/CACA,AAACkB,uDAAOD,rGACR,AAACE,wGAAMjB,IAAIG,GACf,AAACc,8CAAMlB,QAAQI,EAAEH,KACjB,OAAA,NAAKA,WACLC;;AACF,IAAAiB,WACE,KAAAvB,mBACE,AAACsB,8CAAMpB,UAAUM,EAAEC,GACnB,AAACa,8CAAMnB,QAAQE,IAAIG,GACnB,AAACc,8CAAMlB,QAAQI,EAAEH,KACjB,OAAA,NAAKA,WACLC;AANJ,AAAA,4HAAAiB,iDAAAA,rKAACC,2DAAAA,qEAAAA;;;AAQP,6BAAA,7BAAMA,kEAAkBN;AAAxB,AACE,GAAI,CAAG,AAACO,gBAAM,AAAaP,iBAAM,AAASA;AACxC,IAAMhB,YAAU,AAAagB;IACvBf,UAAU,AAAWe;IACrBd,UAAU,AAAWc;IACrBb,MAAU,AAAOa;IACjBZ,QAAU,AAASY;IAJzBQ,aAKgB,AAACE,gBAAMzB;QALvB,AAAAwB,4CAAAD,WAAA,IAAA,/DAKON;QALP,AAAAO,4CAAAD,WAAA,IAAA,/DAKSlB;AALT,AAME,YAAAR,mBACE,AAACqB,+CAAOnB,UAAUM,GAClB,AAACa,+CAAOlB,QAAQiB,GAChB,AAACC,+CAAOjB,QAAQI,GAChBH,IACAC;;AACJY;;;AAEJ,qBAAA,rBAAMW,kDAAKvB;AAAX,AACE,YAAAN,mBAAA,0DAAA,mCAAA,1DAAS,AAAC8B,8DAAiBxB;;AAE7B,AAAA;AAAA;;;wBAAA,xBAAagC;;AAAb,IAAAP,uCAAA,WACSxB,MAAKgC,IAAIC;AADlB,AAAA,IAAAR,kBAAA,EAAA,UAAA,OAAA,hBACSzB,qBAAAA;IADT0B,kBAAA,CAAAC,oBAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,sEAAAA,xBACS1B,kDAAAA,5CAAKgC,kDAAAA,9CAAIC,kDAAAA;;AADlB,IAAAJ,kBAAA,CAAAF,oBAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,sEAAAA,xBACS7B,kDAAAA,5CAAKgC,kDAAAA,9CAAIC,kDAAAA;;AADlB,MAAA,AAAAH,2BAAA,cACS9B;;;;AADT,AAAA,sBAAA,tBACG2B,oDAAM3B,MAAKgC,IAAIC;AADlB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,4CAAA,tEACSjC,0BAAAA;AADT,OACSA,yCAAAA,MAAKgC,IAAIC;;AADlB,OAAAT,qCACSxB,MAAKgC,IAAIC;;;;AADlB;;;;;;;;;;;;;;;;;iDAGalC,aACLoC;;;;;;;;;;;gGAEK/B,EAAE4B,IAAIC;;IAAN7B;AACL,IAAAkC,qBAAiB,4CAAA,AAAAE,uCAAA,nFAACC,4DAAKN,mBAAMH;AAA7B,AAAA,GAAA,CAAAM,sBAAA;AAGE,IAAMM,WAAS,CAACX,2CAAAA,6CAAAA;AAAhB,AACE,AAAAS,0CAAA,8CAAA,AAAAC,hEAAQR,iFAAAA,/DAAMpB,kFAAMiB,IAAIY;;AACxBA;;AALJ,aAAAN,TAAUC;AAAV,AACE,AAAI,AAAAG,0CAAA,8CAAA,AAAAC,hEAAQR,iFAAAA,/DAAMpB,kFAAMiB,IAAIO;;AACxBA;;;;;;;;;;;;;;;;;;;gGANDxC,MACLoC;iDADKpC,MACLoC;;;;AADR,uBAAA,vBAAMD,sDAAOnC;AAAb,AACE,IAAMoC,aAAM,AAACC,yBAAU,AAACd,mBAAIvB;iDADjBA,jDACX,uDAAMoC,vDACJ,YAAAE,sDAAA","names":["this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","datascript.lru/LRU","datascript.lru/->LRU","key-value","gen-key","key-gen","gen","limit","this","k","v","datascript.lru/assoc-lru","_","cljs.core/-contains-key?","cljs.core/-lookup","nf","writer","opts","cljs.core/-pr-writer","lru","temp__5802__auto__","g","cljs.core.dissoc","cljs.core.assoc","G__18080","datascript.lru/cleanup-lru","cljs.core/count","vec__18090","cljs.core.nth","cljs.core/first","datascript.lru/lru","cljs.core/sorted-map","datascript$lru$ICache$_get$dyn","x__5393__auto__","m__5394__auto__","datascript.lru/-get","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","datascript.lru/ICache","key","compute-fn","datascript.lru/cache","*impl","cljs.core/volatile!","datascript.lru/t_datascript$lru18117","temp__5806__auto__","cached","cljs.core/deref","cljs.core.get","cljs.core/-vreset!","cljs.core/-deref","computed"],"sourcesContent":["(ns ^:no-doc datascript.lru)\n\n(declare assoc-lru cleanup-lru)\n\n#?(:cljs\n    (deftype LRU [key-value gen-key key-gen gen limit]\n      IAssociative\n      (-assoc [this k v] (assoc-lru this k v))\n      (-contains-key? [_ k] (-contains-key? key-value k))\n      ILookup\n      (-lookup [_ k]    (-lookup key-value k nil))\n      (-lookup [_ k nf] (-lookup key-value k nf))\n      IPrintWithWriter\n      (-pr-writer [_ writer opts]\n                  (-pr-writer key-value writer opts)))\n   :clj\n    (deftype LRU [^clojure.lang.Associative key-value gen-key key-gen gen limit]\n      clojure.lang.ILookup\n      (valAt [_ k]           (.valAt key-value k))\n      (valAt [_ k not-found] (.valAt key-value k not-found))\n      clojure.lang.Associative\n      (containsKey [_ k] (.containsKey key-value k))\n      (entryAt [_ k]     (.entryAt key-value k))\n      (assoc [this k v]  (assoc-lru this k v))))\n\n(defn assoc-lru [^LRU lru k v]\n  (let [key-value (.-key-value lru)\n        gen-key   (.-gen-key lru)\n        key-gen   (.-key-gen lru)\n        gen       (.-gen lru)\n        limit     (.-limit lru)]\n    (if-let [g (key-gen k nil)]\n      (LRU.\n        key-value\n        (-> gen-key\n            (dissoc g)\n            (assoc gen k))\n        (assoc key-gen k gen)\n        (inc gen)\n        limit)\n      (cleanup-lru\n        (LRU.\n          (assoc key-value k v)\n          (assoc gen-key gen k)\n          (assoc key-gen k gen)\n          (inc gen)\n          limit)))))\n\n(defn cleanup-lru [^LRU lru]\n  (if (> (count (.-key-value lru)) (.-limit lru))\n    (let [key-value (.-key-value lru)\n          gen-key   (.-gen-key lru)\n          key-gen   (.-key-gen lru)\n          gen       (.-gen lru)\n          limit     (.-limit lru)\n          [g k]     (first gen-key)]\n      (LRU.\n        (dissoc key-value k)\n        (dissoc gen-key g)\n        (dissoc key-gen k)\n        gen\n        limit))\n    lru))\n\n(defn lru [limit]\n  (LRU. {} (sorted-map) {} 0 limit))\n\n(defprotocol ICache\n  (-get [this key compute-fn]))\n\n(defn cache [limit]\n  (let [*impl (volatile! (lru limit))]\n    (reify ICache\n      (-get [_ key compute-fn]\n        (if-some [cached (get @*impl key nil)]\n          (do (vswap! *impl assoc key cached)\n              cached)\n          (let [computed (compute-fn)]\n            (vswap! *impl assoc key computed)\n            computed))))))\n"],"x_google_ignoreList":[0]}