{"version":3,"sources":["ouroboros/app/db_schema.cljs"],"mappings":"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","names":["ouroboros.app.db-schema/schema","cljs.spec.alpha/def-impl","cljs.core/int?","cljs.core/string?","cljs.core/boolean?","cljs.spec.alpha.every_impl","G__26060","cljs.core/coll?","G__26061","cljs.core/float?","G__26062","G__26063","G__26064","cljs.core/int","cljs.spec.alpha/map-spec-impl","G__26065","cljs.core/map?","cljs.core/contains?","G__26066","G__26067","G__26068"],"sourcesContent":["(ns ouroboros.app.db-schema\n  (:require [clojure.spec.alpha :as s]))\n\n(def schema\n  {:scene/id               {:db/unique             :db.unique/identity}\n   :scene/messages         {:db/valueType          :db.type/ref\n                            :db/cardinality        :db.cardinality/many}\n   :message/id             {:db/unique             :db.unique/identity}\n   :message/role           {:db/valueType          :db.type/ref\n                            :db/cardinality        :db.cardinality/one}\n   :role/name              {:db/unique             :db.unique/identity}})\n\n(s/def :scene/id int?)\n(s/def :scene/name string?)\n(s/def :message/id int?)\n(s/def :message/role string?)\n(s/def :message/text string?)\n(s/def :message/prefix string?)\n(s/def :message/postfix string?)\n(s/def :message/over boolean?)\n(s/def :message/prefix-token (s/every int?))\n(s/def :message/postfix-token (s/every int?))\n;; (s/def :message.train/loss  float?)\n;; (s/def :message.train/train-times  float?)\n;; (s/def :message.inference/temperature float?)\n;; (s/def :message.inference/top_p float?)\n;; (s/def :message.inference/alpha_frequency float?)\n;; (s/def :message.inference/alpha_decay float?)\n;; (s/def :message.inference/alpha_presence float?)\n;; (s/def :message.inference/token_count int?)\n;; (s/def :message.inference/token_ban (s/every int?))\n;; (s/def :message.inference/token_stop (s/every int?))\n\n(s/def :message/loss  float?)\n(s/def :message/train-times  float?)\n(s/def :message/temperature float?)\n(s/def :message/top_p float?)\n(s/def :message/alpha_frequency float?)\n(s/def :message/alpha_decay float?)\n(s/def :message/alpha_presence float?)\n(s/def :message/token_count int?)\n(s/def :message/token_ban (s/every int?))\n(s/def :message/token_stop (s/every int?))\n(s/def :message/tokens (s/every int))\n(s/def :role/name string?)\n(s/def :role/prefix string?)\n(s/def :role/postfix string?)\n\n(s/def :entity/role (s/keys :req [:role/name]\n                            :opt [:role/prefix :role/postfix]))\n(s/def :message/role :entity/role)\n(s/def :entity/message (s/keys :req [:message/id :message/text :message/role]\n                               :opt [:message/prefix\n                                     :message/over\n                                     :message/postfix\n                                     :message/prefix-token\n                                     :message/postfix-token\n                                     :message/loss\n                                     :message/train-times\n                                     :message/temperature\n                                     :message/top_p\n                                     :message/alpha_frequency\n                                     :message/alpha_decay\n                                     :message/alpha_presence\n                                     :message/token_count\n                                     :message/token_ban\n                                     :message/token_stop\n                                     :message/tokens]))\n(s/def :scene/messages (s/every :entity/message))\n\n(s/def :entity/scene (s/keys :req [:scene/id :scene/messages]\n                             :opt [:scene/name]))\n"]}