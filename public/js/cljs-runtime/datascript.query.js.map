{"version":3,"sources":["datascript/query.cljc"],"mappings":"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","names":["datascript.query/*query-cache*","datascript.lru/cache","this__5343__auto__","k__5344__auto__","this__5345__auto__","k23252","else__5346__auto__","G__23256","cljs.core/Keyword","rels","sources","rules","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__23257","vec__23258","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__23251","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this23253","other23254","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__23268","this__5351__auto__","k__5352__auto__","pred__23269","cljs.core/keyword-identical?","expr__23270","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.query/Context","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__23255","extmap__5385__auto__","G__23275","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k23277","G__23282","attrs","tuples","p__23283","vec__23284","G__23276","this23278","other23279","G__23290","pred__23291","expr__23292","datascript.query/Relation","G__23280","G__23295","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection","cljs.core/set","cljs.core/keys","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq23297","self__5755__auto__","xs","cljs.core/cat","G__23303","datascript.query/zip","args-arr__5794__auto__","argseq__5795__auto__","seq23300","G__23301","G__23302","self__5754__auto__","a","b","cljs.core.mapv","cljs.core/vector","rest","cljs.core.apply","cljs.core/mapv","datascript.query/same-keys?","p1__23305#","cljs.core/every?","p1__23306#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__23307","vec__23308","pattern-el","form-el","cljs.core.map","cljs.core/butlast","p__23312","vec__23313","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__5636__auto__","i","datascript.query/sum-rel","map__23319","cljs.core/--destructure-map","map__23320","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info","cljs.core.pr_str","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__5523__auto__","s__23322","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__23324","cljs.core/chunk-buffer","i__23323","vec__23326","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23321","cljs.core/chunk-rest","vec__23329","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__23333","chunk__23334","count__23335","i__23336","vec__23343","c__5568__auto__","cljs.core/chunk-first","vec__23346","idx-a","cljs.core.conj_BANG_","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge","cljs.core.range","G__23352","G__23353","G__23350","G__23351","G__23356","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","datascript.query/parse-rules","cljs.reader.read_string","datascript.parser/parse-rules","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","datascript$query$IBinding$in__GT_rel$dyn","x__5393__auto__","m__5394__auto__","datascript.query/in->rel","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","cljs.core/PROTOCOL_SENTINEL","datascript.parser/BindIgnore","_","datascript.query.prod_rel","datascript.parser/BindScalar","cljs.core.get_in","cljs.core.into_array","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","cljs.core/empty?","p1__23360#","datascript.parser/BindTuple","p1__23361#","p2__23362#","p__23366","vec__23367","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update","cljs.core/assoc","datascript.parser/RulesVar","cljs.core/conj","datascript.query/resolve-ins","bindings","values","cb","cv","p1__23370#","cljs.core/meta","p1__23371#","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","cljs.core/int?","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","common-attrs","n","getters-arr","cljs.core.list_STAR_","p1__23376#","datascript.query/-group-by","f","init","ret","x","k","cljs.core.assoc_BANG_","cljs.core.conj","datascript.query/hash-attrs","key-fn","datascript.query/hash-join","tuples1","tuples2","keep-attrs1","keep-attrs2","cljs.core/reduce-kv","vec","keep-idxs1","keep-idxs2","cljs.core/->Eduction","key-fn1","key-fn2","hash","new-tuples","tuple2","key","temp__5806__auto__","tuple1","datascript.query/subtract-rel","map__23380","map__23381","key-fn-b","key-fn-a","p1__23379#","cljs.core/filterv","G__23382","datascript.query/lookup-pattern-db","db","search-pattern","p1__23383#","datoms","datascript.db/-search","attr->prop","cljs.core.filter","p__23384","vec__23385","s","datascript.query/matches-pattern?","and__5043__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__23389#","attr->idx","p__23390","vec__23391","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__23398#","cljs.core/some","datascript.query/context-resolve-val","temp__5808__auto__","fexpr__23400","datascript.query/rel-contains-attrs?","p1__23401#","datascript.query/rel-prod-by-attrs","p1__23402#","production","p1__23403#","cljs.core.remove","datascript.query/-call-fn","args","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__23408","vec__23411","seq__23412","first__23413","vec__23414","pred","or__5045__auto__","datascript.built-ins/query-fns","cljs.core/symbol?","tuple-pred","p1__23407#","datascript.query/bind-by-fn","vec__23419","vec__23422","seq__23423","first__23424","vec__23425","out","datascript.parser/parse-binding","fun","tuple-fn","s__23430","b__23432","i__23431","iter__23429","val","datascript.query/rule?","head","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom","datascript.query/expand-rule","used-args","vec__23436","seq__23437","first__23438","rule","call-args","seqid","cljs.core.swap_BANG_","cljs.core/inc","branches","s__23440","b__23442","i__23441","vec__23444","seq__23445","first__23446","vec__23447","seq__23448","first__23449","iter__23439","vec__23451","seq__23452","first__23453","vec__23454","seq__23455","first__23456","branch","rule-args","clauses","replacements","p1__23435#","clojure.walk/postwalk","x__18649__auto__","cljs.core.symbol","datascript.query/remove-pairs","ys","pairs","p__23457","vec__23458","y","datascript.query/rule-gen-guards","rule-clause","vec__23462","seq__23463","first__23464","prev-call-args","s__23466","b__23468","i__23467","vec__23470","iter__23465","vec__23473","prev-args","datascript.query/walk-collect","cljs.core/deref","p1__23476#","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__23477","vec__23478","vec__23481","seq__23482","first__23483","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__23484#","stack","frame","vec__23504","vec__23507","seq__23508","first__23509","next-clauses","p1__23485#","cljs.core/split-with","datascript.query/-collect","vec__23510","seq__23511","first__23512","vec__23513","active-gs","pending-gs","p1__23486#","prefix-clauses","s__23518","b__23520","i__23519","iter__23517","datascript.query.concatv","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__23524","e","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec","datascript.query/dynamic-lookup-attrs","vec__23527","G__23530","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__23545#","cljs.core.keep","datascript.query/bound-vars","p1__23546#","cljs.core.mapcat","datascript.query/check-bound","bound","clojure.set/subset?","missing","clojure.set.difference","datascript.query/check-free-same","free","p1__23549#","cljs.core/=","datascript.query/check-free-subset","seq__23551","chunk__23552","count__23553","i__23554","cljs.core.prn","G__23584","datascript.query._resolve_clause","orig-clause","pred__23585","expr__23586","G__23588","G__23589","G__23590","G__23591","G__23592","G__23593","G__23599","G__23600","G__23604","G__23605","G__23612","G__23613","G__23617","G__23618","G__23622","G__23623","G__23627","G__23628","G__23632","G__23633","cljs.core/nfirst","vec__23594","seq__23595","first__23596","source-sym","*implicit-source*-orig-val__23597","*implicit-source*-temp-val__23598","vec__23601","seq__23602","first__23603","contexts","p1__23572#","datascript.query/resolve-clause","p1__23573#","vec__23606","seq__23607","first__23608","vec__23609","seq__23610","first__23611","req-vars","vec__23614","seq__23615","first__23616","join-context","p1__23574#","p1__23575#","sum-rel","vec__23619","seq__23620","first__23621","vec__23624","seq__23625","first__23626","negation-vars","context'","negation-context","negation","vec__23629","seq__23630","first__23631","relation","*lookup-attrs*-orig-val__23634","*lookup-attrs*-temp-val__23635","*implicit-source*-orig-val__23637","*implicit-source*-temp-val__23638","G__23639","G__23640","datascript.query/-q","*implicit-source*-orig-val__23641","*implicit-source*-temp-val__23642","datascript.query/-collect-tuples","copy-map","cljs.core.comp","cljs.core/aclone","G__23645","symbols","datascript.query._collect","keep-attrs","p1__23643#","datascript.query/collect","datascript$query$IContextResolve$_context_resolve$dyn","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.built-ins/aggregates","datascript.parser/Constant","datascript.query/-aggregate","find-elements","element","fixed-value","datascript.parser/aggregate?","p1__23646#","vals","p1__23647#","datascript.query/idxs-of","p1__23648#","p2__23649#","cljs.core/nil?","datascript.query/aggregate","resultset","group-idxs","cljs.core/complement","group-fn","p1__23650#","grouped","s__23652","b__23654","i__23653","vec__23655","iter__23651","vec__23658","datascript.query/map*","p1__23661#","p2__23662#","cljs.core/empty","datascript.query/tuples->return-map","return-map","idxs","m","datascript$query$IPostProcess$_post_process$dyn","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__23664","b__23666","i__23665","iter__23663","datascript.parser/pull?","datascript.pull_api.parse_opts","s__23668","b__23670","i__23669","iter__23667","parsed-opts","el","datascript.pull-api/pull-impl","datascript.query/q","seq23672","G__23673","q","inputs","parsed-q","datascript.lru/-get","datascript.parser/parse-query","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__23674","datascript.parser/query->map","wheres","G__23675","p1__23671#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.built-ins :as built-ins]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise cond+]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru :as lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa])\n  #?(:clj\n     (:import\n      [clojure.lang ILookup LazilyPersistentVector]\n      [datascript.parser BindColl BindIgnore BindScalar BindTuple\n       Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n       RulesVar SrcVar Variable])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:dynamic *query-cache* (lru/cache 100))\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n#?(:clj (set! *unchecked-math* true))\n\n#?(:clj\n   (defn join-tuples [t1 ^{:tag \"[[Ljava.lang.Object;\"} idxs1\n                      t2 ^{:tag \"[[Ljava.lang.Object;\"} idxs2]\n     (let [l1  (alength idxs1)\n           l2  (alength idxs2)\n           res (da/make-array (+ l1 l2))]\n       (if (.isArray (.getClass ^Object t1))\n         (dotimes [i l1] (aset res i (aget ^objects t1 (aget idxs1 i))))\n         (dotimes [i l1] (aset res i (get t1 (aget idxs1 i)))))\n       (if (.isArray (.getClass ^Object t2))\n         (dotimes [i l2] (aset res (+ l1 i) (get ^objects t2 (aget idxs2 i))))\n         (dotimes [i l2] (aset res (+ l1 i) (get t2 (aget idxs2 i)))))\n       res))\n   :cljs\n   (defn join-tuples [t1 idxs1\n                      t2 idxs2]\n     (let [l1  (alength idxs1)\n           l2  (alength idxs2)\n           res (da/make-array (+ l1 l2))]\n       (dotimes [i l1] (aset res i (da/aget t1 (aget idxs1 i))))\n       (dotimes [i l2] (aset res (+ l1 i) (da/aget t2 (aget idxs2 i))))\n       res)))\n\n#?(:clj (set! *unchecked-math* false))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (dp/parse-rules rules) ;; validation\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (let [cb (count bindings)\n        cv (count values)]\n    (cond\n      (< cb cv)\n      (raise \"Extra inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      (> cb cv)\n      (raise \"Too few inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      :else\n      (reduce resolve-in context (zipmap bindings values)))))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (if (int? idx)\n        (let [idx (int idx)]\n          (fn contained-int-getter-fn [tuple]\n            (let [eid #?(:cljs (da/aget tuple idx)\n                         :clj (if (.isArray (.getClass ^Object tuple))\n                                (aget ^objects tuple idx)\n                                (nth tuple idx)))]\n              (cond\n                (number? eid)     eid ;; quick path to avoid fn call\n                (sequential? eid) (db/entid *implicit-source* eid)\n                (da/array? eid)   (db/entid *implicit-source* eid)\n                :else             eid))))\n        ;; If the index is not an int?, the target can never be an array\n        (fn contained-getter-fn [tuple]\n          (let [eid #?(:cljs (da/aget tuple idx)\n                       :clj (.valAt ^ILookup tuple idx))]\n            (cond\n              (number? eid)     eid ;; quick path to avoid fn call\n              (sequential? eid) (db/entid *implicit-source* eid)\n              (da/array? eid)   (db/entid *implicit-source* eid)\n              :else             eid))))\n      (if (int? idx)\n        (let [idx (int idx)]\n          (fn int-getter [tuple]\n            #?(:cljs (da/aget tuple idx)\n               :clj (if (.isArray (.getClass ^Object tuple))\n                      (aget ^objects tuple idx)\n                      (nth tuple idx)))))\n        ;; If the index is not an int?, the target can never be an array\n        (fn getter [tuple]\n          #?(:cljs (da/aget tuple idx)\n             :clj (.valAt ^ILookup tuple idx)))))))\n\n\n(defn tuple-key-fn\n  [attrs common-attrs]\n  (let [n (count common-attrs)]\n    (if (== n 1)\n      (getter-fn attrs (first common-attrs))\n      (let [^objects getters-arr #?(:clj (into-array Object common-attrs)\n                                    :cljs (into-array common-attrs))]\n        (loop [i 0]\n          (if (< i n)\n            (do\n              (aset getters-arr i (getter-fn attrs (aget getters-arr i)))\n              (recur (unchecked-inc i)))\n            #?(:clj\n               (fn [tuple]\n                 (let [^objects arr (make-array Object n)]\n                   (loop [i 0]\n                     (if (< i n)\n                       (do\n                         (aset arr i ((aget getters-arr i) tuple))\n                         (recur (unchecked-inc i)))\n                       (LazilyPersistentVector/createOwning arr)))))\n               :cljs (fn [tuple]\n                       (list* (.map getters-arr #(% tuple)))))))))))\n\n(defn -group-by\n  [f init coll]\n  (persistent!\n   (reduce\n    (fn [ret x]\n      (let [k (f x)]\n        (assoc! ret k (conj (get ret k init) x))))\n    (transient {}) coll)))\n\n(defn hash-attrs [key-fn tuples]\n  (-group-by key-fn '() tuples))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (->> attrs2\n                           (reduce-kv (fn keeper [vec k _]\n                                        (if (attrs1 k)\n                                          vec\n                                          (conj! vec k)))\n                                      (transient []))\n                           persistent!) ; keys in attrs2-attrs1\n        keep-idxs1    (to-array (vals attrs1))\n        keep-idxs2    (to-array (->Eduction (map attrs2) keep-attrs2)) ; vals in attrs2-attrs1 by keys\n        key-fn1       (tuple-key-fn attrs1 common-attrs)\n        key-fn2       (tuple-key-fn attrs2 common-attrs)\n        hash          (hash-attrs key-fn1 tuples1)\n        new-tuples    (->>\n                       tuples2\n                       (reduce (fn outer [acc tuple2]\n                                 (let [key (key-fn2 tuple2)]\n                                   (if-some [tuples1 #?(:clj (hash key) :cljs (get hash key))]\n                                     (reduce (fn inner [acc tuple1]\n                                               (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                             acc tuples1)\n                                     acc)))\n                               (transient []) )\n                       (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (vec (intersect-keys attrs-a attrs-b))\n        key-fn-b  (tuple-key-fn attrs-b attrs)\n        hash      (hash-attrs key-fn-b tuples-b)\n        key-fn-a  (tuple-key-fn attrs-a attrs)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (or (= % '_) (free-var? %)) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (= p '_) (free-var? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins/query-fns f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins/query-fns f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (cond+\n    (not (sequential? clause))\n    false\n\n    :let [head (if (source? (first clause))\n                  (second clause)\n                  (first clause))]\n\n    (not (symbol? head))\n    false\n\n    (free-var? head)\n    false\n\n    (contains? #{'_ 'or 'or-join 'and 'not 'not-join} head)\n    false\n\n    (not (contains? (:rules context) head))\n    (raise \"Unknown rule '\" head \" in \" clause\n      {:error :query/where\n       :form  clause})\n\n    :else true))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (raise \"Insufficient bindings: \" missing \" not bound in \" form\n             {:error :query/where\n              :form  form\n              :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n             {:error :query/where\n              :form  form\n              :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (filter-by-pred context clause))\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (bind-by-fn context clause))\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect-tuples\n  [acc rel ^long len copy-map]\n  (->Eduction\n   (comp\n    (map\n     (fn [#?(:cljs t1\n            :clj ^{:tag \"[[Ljava.lang.Object;\"} t1)]\n       (->Eduction\n        (map\n         (fn [t2]\n           (let [res (aclone t1)]\n             #?(:clj\n                (if (.isArray (.getClass ^Object t2))\n                  (dotimes [i len]\n                    (when-some [idx (aget ^objects copy-map i)]\n                      (aset res i (aget ^objects t2 idx))))\n                  (dotimes [i len]\n                    (when-some [idx (aget ^objects copy-map i)]\n                      (aset res i (get t2 idx)))))\n                :cljs\n                (dotimes [i len]\n                  (when-some [idx (aget ^objects copy-map i)]\n                    (aset res i (da/aget ^objects t2 idx)))))\n             res)))\n        (:tuples rel))))\n    cat)\n   acc))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n   (cond+\n     :let [rel (first rels)]\n \n     (nil? rel) acc\n \n     ;; one empty rel means final set has to be empty\n     (empty? (:tuples rel)) []\n \n     :let [keep-attrs (select-keys (:attrs rel) symbols)]\n \n     (empty? keep-attrs) (recur acc (next rels) symbols)\n \n     :let [copy-map (to-array (map #(get keep-attrs %) symbols))\n           len      (count symbols)]\n\n     :else\n     (recur (-collect-tuples acc rel len copy-map) (next rels) symbols))))\n\n(defn collect [context symbols]\n  (into #{} (map vec) (-collect context symbols)))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-ins/aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defn map* [f xs]\n  (reduce #(conj %1 (f %2)) (empty xs) xs))\n\n(defn tuples->return-map [return-map tuples]\n  (let [symbols (:symbols return-map)\n        idxs    (range 0 (count symbols))]\n    (map*\n      (fn [tuple]\n        (reduce\n          (fn [m i] (assoc m (nth symbols i) (nth tuple i)))\n          {} idxs))\n      tuples)))\n\n(defprotocol IPostProcess\n  (-post-process [find return-map tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ return-map tuples]\n    (if (nil? return-map)\n      tuples\n      (tuples->return-map return-map tuples)))\n\n  FindColl\n  (-post-process [_ return-map tuples]\n    (into [] (map first) tuples))\n\n  FindScalar\n  (-post-process [_ return-map tuples]\n    (ffirst tuples))\n\n  FindTuple\n  (-post-process [_ return-map tuples]\n    (if (some? return-map)\n      (first (tuples->return-map return-map [(first tuples)]))\n      (first tuples))))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     (let [db (-context-resolve (:source find) context)\n                           pattern (-context-resolve (:pattern find) context)]\n                       (dpa/parse-opts db pattern))))]\n    (for [tuple resultset]\n      (mapv\n        (fn [parsed-opts el]\n          (if parsed-opts\n            (dpa/pull-impl parsed-opts el)\n            el))\n        resolved\n        tuple))))\n\n(defn q [q & inputs]\n  (let [parsed-q      (lru/-get *query-cache* q #(dp/parse-query q))\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find (:qreturn-map parsed-q)))))\n"],"x_google_ignoreList":[0]}