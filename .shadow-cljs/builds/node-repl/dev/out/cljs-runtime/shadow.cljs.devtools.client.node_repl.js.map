{"version":3,"sources":["shadow/cljs/devtools/client/node_repl.cljs"],"mappings":";AAIA,2DAAA,3DAAMA,8HAAoBC,EAAEC;AAA5B,AACE,kBAAA,mFAAA,rGAACC,sLAA0BF,EAAEC;;AAC7B,aAAA,bAACE;;AACD,AAACA,aAAgBH;;AACjB,oBAAA,bAACG;;AAEH,4DAAA,5DAAMC,gIAAqBJ,EAAEK;AAA7B,AACE,kBAAA,mFAAA,rGAACH,wLAA2BF,EAAEK;;AAC9B,aAAA,bAACF;;AACD,AAACA,aAAgBH;;AACjB,oBAAA,bAACG;;AAGH,6CAAA,7CAAMG;AAAN,AAKE,WAAA,XAACC,+BACC,WAAKP,EAAEC;AAAP,AACE,OAACF,yDAAmBC,EAAEC;;;AAE1B,kBAAA,XAACM,gCACC,WAAKP,EAAEK;AAAP,AACE,OAACD,0DAAoBJ,EAAEK","names":["shadow.cljs.devtools.client.node-repl/uncaught-exception","e","origin","cljs.core/tap>","js/console.warn","shadow.cljs.devtools.client.node-repl/unhandled-rejection","promise","shadow.cljs.devtools.client.node-repl/main","js/process.on"],"sourcesContent":["(ns shadow.cljs.devtools.client.node-repl\n  (:require [shadow.cljs.devtools.client.node :as node]\n            [shadow.cljs.devtools.client.console])) ;; for --inspect, doesn't hurt otherwise\n\n(defn uncaught-exception [e origin]\n  (tap> [:uncaught-exception e origin])\n  (js/console.warn \"---- UNCAUGHT EXCEPTION --------------\")\n  (js/console.warn e)\n  (js/console.warn \"--------------------------------------\"))\n\n(defn unhandled-rejection [e promise]\n  (tap> [:unhandled-rejection e promise])\n  (js/console.warn \"---- UNHANDLED REJECTION --------------\")\n  (js/console.warn e)\n  (js/console.warn \"--------------------------------------\"))\n\n;; repl related things will already have executed and started to connect (async)\n(defn main []\n  ;; (js/process.on \"uncaughtException\" uncaught-exception)\n  ;; not doing this, so we only attach this once on startup but\n  ;; can redefine it during operation by redefining the var\n\n  (js/process.on \"uncaughtException\"\n    (fn [e origin]\n      (uncaught-exception e origin)))\n\n  (js/process.on \"unhandledRejection\"\n    (fn [e promise]\n      (unhandled-rejection e promise))))"],"x_google_ignoreList":[0]}